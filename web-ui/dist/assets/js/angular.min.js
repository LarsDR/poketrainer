angular.module("poketrainer",["poketrainer.Module.Templates","Poketrainer.Module.SocketEventEmitter","Poketrainer.Service.Navigation","Poketrainer.Service.SocketEvent","Poketrainer.Service.Socket","Poketrainer.State.Abstracts","Poketrainer.State.Status","Poketrainer.State.Users","ui.router","ngMaterial","ngMessages"]).config(["$urlRouterProvider","$locationProvider","$urlMatcherFactoryProvider","$mdThemingProvider",function(e,t,o,a){e.rule(function(e,t){var o=t.url().toLowerCase();if(!("/"===o[o.length-1]||o.indexOf("/?")>-1))return o.indexOf("?")>-1?o.replace("?","/?"):o+"/"}).otherwise("/"),o.strictMode(!1),a.theme("default").primaryPalette("blue").accentPalette("red")}]).run(["$state","$rootScope",function(e,t){t.$on("inventory:updated",function(e){})}]),angular.module("Poketrainer.Module.SocketEventEmitter",["Poketrainer.Service.Socket"]).run(["$rootScope","PokeSocket","SocketEvent",function(e,t,o){t.forward(o.UserStatus),t.on(o.Data,function(t){e.$broadcast(t.event+":"+t.action,t.data)})}]),angular.module("Poketrainer.State.Abstracts",["ui.router"]).config(["$stateProvider",function(e){e.state("public",{"abstract":!0,views:{header:{templateUrl:"states/abstracts/header.tpl.html",controller:"HeaderController"},content:{template:"<ui-view/>"}}})}]).controller("HeaderController",["$rootScope","$scope","$state","Navigation",function(e,t,o,a){t.navigation=a.primary.get(),t.state=o.current.name,e.$on("$stateChangeSuccess",function(e,o,a,n,r){t.state=o.name})}]),angular.module("Poketrainer.State.Status",["ui.router","uiGmapgoogle-maps","chart.js","easypiechart","datatables","ui-leaflet","nemLogging"]).config(["$stateProvider","uiGmapGoogleMapApiProvider",function(e,t){t.configure({v:"3.24",libraries:"weather,geometry,visualization"}),e.state("public.dashboard",{url:"/dashboard/:username",resolve:{locationData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function(e){!angular.isUndefined(e)&&e.success&&"location"==e.type&&n.resolve(angular.fromJson(e.data))};return o.on(a.Request,r),o.emit(a.Request,{username:t.username,types:["location"]}),n.promise}],inventoryData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function(e){!angular.isUndefined(e)&&e.success&&"inventory"==e.type&&n.resolve(angular.fromJson(e.data))};return o.on(a.Request,r),o.emit(a.Request,{username:t.username,types:["inventory"]}),n.promise}],playerData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function(e){!angular.isUndefined(e)&&e.success&&"player"==e.type&&n.resolve(angular.fromJson(e.data))};return o.on(a.Request,r),o.emit(a.Request,{username:t.username,types:["player"]}),n.promise}],playerStatsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function(e){!angular.isUndefined(e)&&e.success&&"player_stats"==e.type&&n.resolve(angular.fromJson(e.data))};return o.on(a.Request,r),o.emit(a.Request,{username:t.username,types:["player_stats"]}),n.promise}],pokemonData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function(e){!angular.isUndefined(e)&&e.success&&"pokemon"==e.type&&n.resolve(angular.fromJson(e.data))};return o.on(a.Request,r),o.emit(a.Request,{username:t.username,types:["pokemon"]}),n.promise}],attacksData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function(e){!angular.isUndefined(e)&&e.success&&"attacks"==e.type&&n.resolve(angular.fromJson(e.data))};return o.on(a.Request,r),o.emit(a.Request,{username:t.username,types:["attacks"]}),n.promise}]},controller:"DashboardController",templateUrl:"states/dashboard/dashboard.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("DashboardController",["$scope","$stateParams","$mdToast","PokeSocket","leafletData","locationData","inventoryData","playerData","playerStatsData","pokemonData","attacksData","SocketEvent","DTOptionsBuilder",function(e,t,o,a,n,r,s,i,l,u,c,p,d){a.emit(p.Join,{room:t.username});var m,v=function S(t){if(e.evolve_disabled=!1,e.transfer_disabled=!1,t.success)for(var n=e.pokemon.length-1;n>=0;n--)e.pokemon[n].id==m&&e.pokemon.splice(n,1);m=0,a.removeListener(p.Transfer,S),o.show(o.simple().textContent(t.message).position("top center").hideDelay(3e3))};e.transfer_disabled=!1,e.transfer=function(o){m=o,e.evolve_disabled=!0,e.transfer_disabled=!0,a.on(p.Transfer,v),a.emit(p.Transfer,{username:t.username,p_id:o})};var f=function h(t){e.evolve_disabled=!1,e.transfer_disabled=!1,a.removeListener(p.Evolve,h),o.show(o.simple().textContent(t.message).position("top center").hideDelay(3e3))};e.evolve_disabled=!1,e.evolve=function(o){e.evolve_disabled=!0,e.transfer_disabled=!0,a.on(p.Evolve,f),a.emit(p.Evolve,{username:t.username,p_id:o})};var k=function P(t){e.snipe_disabled=!1,a.removeListener(p.Snipe,P),o.show(o.simple().textContent(t.message).position("top center").hideDelay(3e3))};e.snipe_coords="",e.snipe_disabled=!1,e.snipe_auto=!1,e.snipe=function(o){e.snipe_disabled=!0,a.on(p.Snipe,k),a.emit(p.Snipe,{username:t.username,latlng:o})},e.$on("inventory:updated",function(t,o){e.inventory=o,y()}),e.$on("player_stats:updated",function(t,o){e.playerStats=o,y()}),e.$on("player:updated",function(t,o){e.player=o,y()}),e.$on("pokemon:caught",function(t,a){var n=a;e.pokemon.push(n),y(),o.show(o.simple().textContent("Caught: "+n.name+" (IV: "+Math.floor(n.iv)+" | CP: "+n.cp+")").position("top center").hideDelay(3e3))}),e.$on("pokemon:released",function(t,a){for(var n=a,r=e.pokemon.length-1;r>=0;r--)e.pokemon[r].id==n.id&&e.pokemon.splice(r,1);y(),o.show(o.simple().textContent("Released: "+n.name+" (IV: "+Math.floor(n.iv)+" | CP: "+n.cp+")").position("top center").hideDelay(3e3))}),e.$on("pokemon:evolved",function(t,a){for(var n=a.old,r=a["new"],s=e.pokemon.length-1;s>=0;s--)e.pokemon[s].id==n.id&&e.pokemon.splice(s,1);e.pokemon.push(r),o.show(o.simple().textContent("Evolved: "+n.name+" to "+r.name+" (IV: "+Math.floor(r.iv)+" | CP: "+r.cp+")").position("top center").hideDelay(3e3))}),e.$on("fort:spun",function(e,t){o.show(o.simple().textContent("Fort spun, reward: "+t.reward).position("top center").hideDelay(3e3))});var g=0;e.$on("position:update",function(t,o){if(g++,g%5==0){e.markers.bot.lat=o[0],e.markers.bot.lng=o[1];var a={lat:o[0],lng:o[1]};e.paths.main.latlngs.push(a)}}),e.player=i,e.playerStats=l,e.inventory=s,e.pokemon=u,e.attacks=c;var y=function(){e.playerStats.xpPercent=Math.floor((e.playerStats.experience-e.playerStats.prev_level_xp)/(e.playerStats.next_level_xp-e.playerStats.prev_level_xp)*100),e.playerStats.uniquePokedexPercent=Math.floor(e.playerStats.unique_pokedex_entries/151*100),e.playerStats.pokemonInvPercent=Math.floor(e.pokemon.length/e.player.max_pokemon_storage*100),e.playerStats.itemsInvPercent=Math.floor(e.inventory.item_count/e.player.max_item_storage*100)};y(),e.$on("$viewContentLoaded",function(){n.getMap().then(function(e){setTimeout(function(){e.invalidateSize()},3e3)})}),e.map={center:{lat:r[0],lng:r[1],zoom:15}},e.markers={bot:{lat:r[0],lng:r[1],message:e.player.username,focus:!0,draggable:!1}},e.paths={main:{color:"#F44336",weight:4,latlngs:[{lat:r[0],lng:r[1]}]}},e.pokemonDataTableOptions=d.newOptions().withOption("order",[[0,"desc"]]).withOption("stateSave",!0),e.expLvlOptions={animate:{duration:1e3,enabled:!0},barColor:"#03A9F4",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.uniquePokedexOptions={animate:{duration:1e3,enabled:!0},barColor:"#FFC107",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.pokemonInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#009688",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.itemsInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#F44336",scaleColor:!1,lineWidth:10,lineCap:"circle"}}]),angular.module("Poketrainer.State.Users",["ui.router"]).config(["$stateProvider",function(e){e.state("public.users",{url:"/",resolve:{Users:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,a){var n=e.defer(),r=function s(e){!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)&&(o.removeListener(a.UserList,s),n.resolve(e.users))};return o.on(a.UserList,r),o.emit(a.UserList),n.promise}]},controller:"UsersController",templateUrl:"states/users/users.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("UsersController",["$scope","Users","PokeSocket","SocketEvent",function(e,t,o,a){e.users=t;var n=function(t,o){for(var a=0;a<e.users.length;a++)e.users[a].username==o.username&&(e.users[a].status=o.status)};e.$on(a._prefix+a.UserStatus,n)}]),angular.module("Poketrainer.Service.Navigation",[]).factory("Navigation",function(){var e=[],t=function(){return e.sort(function(e,t){var o=e.Priority-t.Priority;return 0===o?e.Label.localeCompare(t.Label):o})},o=function(t,o,a,n,r){"string"!=typeof n&&(n="md md-chevron-right"),"string"!=typeof r&&(r=o),("number"!=typeof a||a<0)&&(a=10),e.push({Label:t,State:o,ActiveState:r,Priority:a,Icon:n})};return{primary:{get:t,register:o}}}),angular.module("Poketrainer.Service.SocketEvent",[]).factory("SocketEvent",function(){return{_prefix:"socket:",UserList:"users",UserStatus:"user_status",Request:"pull",Data:"push",Join:"join",Transfer:"transfer",Evolve:"evolve",Snipe:"snipe"}}),angular.module("Poketrainer.Service.Socket",["btford.socket-io"]).factory("PokeSocket",["socketFactory","$location",function(e,t){var o=window.location.pathname.replace(/\/+$/g,"")+"/socket.io";return e({ioSocket:io.connect(window.location.protocol+"//"+window.location.host+"/poketrainer",{path:o})})}]);
//# sourceMappingURL=data:application/json;base64,
