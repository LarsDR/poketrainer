angular.module("poketrainer",["poketrainer.Module.Templates","Poketrainer.Module.SocketEventEmitter","Poketrainer.Service.Navigation","Poketrainer.Service.SocketEvent","Poketrainer.Service.Socket","Poketrainer.State.Abstracts","Poketrainer.State.Status","Poketrainer.State.Users","ui.router","ngMaterial","ngMessages"]).config(["$urlRouterProvider","$locationProvider","$urlMatcherFactoryProvider","$mdThemingProvider",function(e,t,r,a){e.rule(function(e,t){var r=t.url().toLowerCase();if(!("/"===r[r.length-1]||r.indexOf("/?")>-1))return r.indexOf("?")>-1?r.replace("?","/?"):r+"/"}).otherwise("/"),r.strictMode(!1),a.theme("default").primaryPalette("blue").accentPalette("red")}]).run(["$state","$rootScope",function(e,t){t.$on("inventory:updated",function(e){})}]),angular.module("Poketrainer.Module.SocketEventEmitter",["Poketrainer.Service.Socket"]).run(["$rootScope","PokeSocket","SocketEvent",function(e,t,r){t.forward(r.UserStatus),t.on(r.Data,function(t){e.$broadcast(t.event+":"+t.action,t.data)})}]),angular.module("Poketrainer.State.Abstracts",["ui.router"]).config(["$stateProvider",function(e){e.state("public",{"abstract":!0,views:{header:{templateUrl:"states/abstracts/header.tpl.html",controller:"HeaderController"},content:{template:"<ui-view/>"}}})}]).controller("HeaderController",["$rootScope","$scope","$state","Navigation",function(e,t,r,a){t.navigation=a.primary.get(),t.state=r.current.name,e.$on("$stateChangeSuccess",function(e,r,a,n,o){t.state=r.name})}]),angular.module("Poketrainer.State.Status",["ui.router","uiGmapgoogle-maps","chart.js","easypiechart","datatables","ui-leaflet","nemLogging"]).config(["$stateProvider","uiGmapGoogleMapApiProvider",function(e,t){t.configure({v:"3.24",libraries:"weather,geometry,visualization"}),e.state("public.dashboard",{url:"/dashboard/:username",resolve:{locationData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function(e){!angular.isUndefined(e)&&e.success&&"location"==e.type&&n.resolve(angular.fromJson(e.data))};return r.on(a.Request,o),r.emit(a.Request,{username:t.username,types:["location"]}),n.promise}],inventoryData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function(e){!angular.isUndefined(e)&&e.success&&"inventory"==e.type&&n.resolve(angular.fromJson(e.data))};return r.on(a.Request,o),r.emit(a.Request,{username:t.username,types:["inventory"]}),n.promise}],playerData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function(e){!angular.isUndefined(e)&&e.success&&"player"==e.type&&n.resolve(angular.fromJson(e.data))};return r.on(a.Request,o),r.emit(a.Request,{username:t.username,types:["player"]}),n.promise}],playerStatsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function(e){!angular.isUndefined(e)&&e.success&&"player_stats"==e.type&&n.resolve(angular.fromJson(e.data))};return r.on(a.Request,o),r.emit(a.Request,{username:t.username,types:["player_stats"]}),n.promise}],pokemonData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function(e){!angular.isUndefined(e)&&e.success&&"pokemon"==e.type&&n.resolve(angular.fromJson(e.data))};return r.on(a.Request,o),r.emit(a.Request,{username:t.username,types:["pokemon"]}),n.promise}],attacksData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function(e){!angular.isUndefined(e)&&e.success&&"attacks"==e.type&&n.resolve(angular.fromJson(e.data))};return r.on(a.Request,o),r.emit(a.Request,{username:t.username,types:["attacks"]}),n.promise}]},controller:"DashboardController",templateUrl:"states/dashboard/dashboard.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("DashboardController",["$scope","$stateParams","$mdToast","PokeSocket","leafletData","locationData","inventoryData","playerData","playerStatsData","pokemonData","attacksData","SocketEvent","DTOptionsBuilder",function(e,t,r,a,n,o,s,i,l,u,c,p,m){a.emit(p.Join,{room:t.username});var d,f=function S(t){if(e.transfer_disabled=!1,t.success)for(var n=e.pokemon.length-1;n>=0;n--)e.pokemon[n].id==d&&e.pokemon.splice(n,1);d=0,a.removeListener(p.Transfer,S),r.show(r.simple().textContent(t.message).position("top center").hideDelay(1e3))};e.transfer_disabled=!1,e.transfer=function(r){d=r,e.transfer_disabled=!0,a.on(p.Transfer,f),a.emit(p.Transfer,{username:t.username,p_id:r})};var v=function y(t){e.snipe_disabled=!1,a.removeListener(p.Snipe,y),r.show(r.simple().textContent(t.message).position("top center").hideDelay(1e3))};e.snipe_coords="",e.snipe_disabled=!1,e.snipe_auto=!1,e.snipe=function(r){e.snipe_disabled=!0,a.on(p.Snipe,v),a.emit(p.Snipe,{username:t.username,latlng:r})},e.$on("inventory:updated",function(t,r){e.inventory=r,g()}),e.$on("player_stats:updated",function(t,r){e.playerStats=r,g()}),e.$on("player:updated",function(t,r){e.player=r,g()}),e.$on("pokemon:caught",function(t,a){var n=a;e.pokemon.push(n),g(),r.show(r.simple().textContent("Caught: "+n.name+" (IV: "+Math.floor(n.iv)+" | CP: "+n.cp+")").position("top center").hideDelay(3e3))}),e.$on("pokemon:released",function(t,a){for(var n=a,o=e.pokemon.length-1;o>=0;o--)e.pokemon[o].id==n.id&&e.pokemon.splice(o,1);g(),r.show(r.simple().textContent("Released: "+n.name+" (IV: "+Math.floor(n.iv)+" | CP: "+n.cp+")").position("top center").hideDelay(3e3))}),e.$on("fort:spun",function(e,t){r.show(r.simple().textContent("Fort spun, reward: "+t.reward).position("top center").hideDelay(3e3))});var k=0;e.$on("position:update",function(t,r){if(k++,k%5==0){e.markers.bot.lat=r[0],e.markers.bot.lng=r[1];var a={lat:r[0],lng:r[1]};e.paths.main.latlngs.push(a)}}),e.player=i,e.playerStats=l,e.inventory=s,e.pokemon=u,e.attacks=c;var g=function(){e.playerStats.xpPercent=Math.floor((e.playerStats.experience-e.playerStats.prev_level_xp)/(e.playerStats.next_level_xp-e.playerStats.prev_level_xp)*100),e.playerStats.uniquePokedexPercent=Math.floor(e.playerStats.unique_pokedex_entries/151*100),e.playerStats.pokemonInvPercent=Math.floor(e.pokemon.length/e.player.max_pokemon_storage*100),e.playerStats.itemsInvPercent=Math.floor(e.inventory.item_count/e.player.max_item_storage*100)};g(),e.$on("$viewContentLoaded",function(){n.getMap().then(function(e){setTimeout(function(){e.invalidateSize()},3e3)})}),e.map={center:{lat:o[0],lng:o[1],zoom:15}},e.markers={bot:{lat:o[0],lng:o[1],message:e.player.username,focus:!0,draggable:!1}},e.paths={main:{color:"#F44336",weight:4,latlngs:[{lat:o[0],lng:o[1]}]}},e.pokemonDataTableOptions=m.newOptions().withOption("order",[[0,"desc"]]),e.expLvlOptions={animate:{duration:1e3,enabled:!0},barColor:"#03A9F4",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.uniquePokedexOptions={animate:{duration:1e3,enabled:!0},barColor:"#FFC107",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.pokemonInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#009688",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.itemsInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#F44336",scaleColor:!1,lineWidth:10,lineCap:"circle"}}]),angular.module("Poketrainer.State.Users",["ui.router"]).config(["$stateProvider",function(e){e.state("public.users",{url:"/",resolve:{Users:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,a){var n=e.defer(),o=function s(e){!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)&&(r.removeListener(a.UserList,s),n.resolve(e.users))};return r.on(a.UserList,o),r.emit(a.UserList),n.promise}]},controller:"UsersController",templateUrl:"states/users/users.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("UsersController",["$scope","Users","PokeSocket","SocketEvent",function(e,t,r,a){e.users=t;var n=function(t,r){for(var a=0;a<e.users.length;a++)e.users[a].username==r.username&&(e.users[a].status=r.status)};e.$on(a._prefix+a.UserStatus,n)}]),angular.module("Poketrainer.Service.Navigation",[]).factory("Navigation",function(){var e=[],t=function(){return e.sort(function(e,t){var r=e.Priority-t.Priority;return 0===r?e.Label.localeCompare(t.Label):r})},r=function(t,r,a,n,o){"string"!=typeof n&&(n="md md-chevron-right"),"string"!=typeof o&&(o=r),("number"!=typeof a||a<0)&&(a=10),e.push({Label:t,State:r,ActiveState:o,Priority:a,Icon:n})};return{primary:{get:t,register:r}}}),angular.module("Poketrainer.Service.SocketEvent",[]).factory("SocketEvent",function(){return{_prefix:"socket:",UserList:"users",UserStatus:"user_status",Request:"pull",Data:"push",Join:"join",Transfer:"transfer",Snipe:"snipe"}}),angular.module("Poketrainer.Service.Socket",["btford.socket-io"]).factory("PokeSocket",["socketFactory","$location",function(e,t){var r=window.location.pathname.replace(/\/+$/g,"")+"/socket.io";return e({ioSocket:io.connect(window.location.protocol+"//"+window.location.host+"/poketrainer",{path:r})})}]);
//# sourceMappingURL=data:application/json;base64,
